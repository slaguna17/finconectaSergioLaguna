"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toastrsCache = exports["default"] = void 0;
var _utils = require("./utils.js");
var _config = _interopRequireDefault(require("./config"));
var _constants = require("./constants");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
// TOTO: find a better way of handling this issue
// We will cache data so we can check for duplicated before fire the add action.
var toastrsCache = exports.toastrsCache = [];
var initialState = {
  toastrs: [],
  confirm: null
};
var _default = exports["default"] = (0, _utils.createReducer)(initialState, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, _constants.ADD_TOASTR, function (state, toastr) {
  if (toastr.ignoreToastr) {
    return state;
  }
  var newToastr = _objectSpread({
    id: (0, _utils.guid)(),
    position: _config["default"].position
  }, toastr);
  if (!newToastr.a11yId && toastr && toastr.hasOwnProperty('id') && !toastr.hasOwnProperty('a11yId')) {
    newToastr.a11yId = toastr.id;
  }
  var newState = {};
  if (!_config["default"].newestOnTop) {
    newState = _objectSpread(_objectSpread({}, state), {}, {
      toastrs: [].concat(_toConsumableArray(state.toastrs), [newToastr])
    });
  } else {
    newState = _objectSpread(_objectSpread({}, state), {}, {
      toastrs: [newToastr].concat(_toConsumableArray(state.toastrs))
    });
  }
  exports.toastrsCache = toastrsCache = newState.toastrs;
  return newState;
}), _constants.REMOVE_TOASTR, function (state, id) {
  var newState = _objectSpread(_objectSpread({}, state), {}, {
    toastrs: state.toastrs.filter(function (toastr) {
      return toastr.id !== id;
    })
  });
  exports.toastrsCache = toastrsCache = newState.toastrs;
  return newState;
}), _constants.REMOVE_BY_TYPE, function (state, type) {
  var newState = _objectSpread(_objectSpread({}, state), {}, {
    toastrs: state.toastrs.filter(function (toastr) {
      return toastr.type !== type;
    })
  });
  exports.toastrsCache = toastrsCache = newState.toastrs;
  return newState;
}), _constants.CLEAN_TOASTR, function (state) {
  exports.toastrsCache = toastrsCache = [];
  return _objectSpread(_objectSpread({}, state), {}, {
    toastrs: []
  });
}), _constants.SHOW_CONFIRM, function (state, _ref) {
  var id = _ref.id,
    message = _ref.message,
    options = _ref.options;
  return _objectSpread(_objectSpread({}, state), {}, {
    confirm: {
      id: id || (0, _utils.guid)(),
      show: true,
      message: message,
      options: options || {}
    }
  });
}), _constants.HIDE_CONFIRM, function (state) {
  return _objectSpread(_objectSpread({}, state), {}, {
    confirm: null
  });
}));